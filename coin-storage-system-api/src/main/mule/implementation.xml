<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo"
	xmlns:xml-module="http://www.mulesoft.org/schema/mule/xml-module" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/xml-module http://www.mulesoft.org/schema/mule/xml-module/current/mule-xml-module.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<sub-flow name="updateCoinSubFlow" doc:id="c86d133a-0318-4fe2-8521-ee38cd3b2473" >
		<validation:is-not-null doc:name="Is not null documentID" doc:id="ca94d54e-d446-44d0-9de8-dd3ef683836f" value="#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.updateCoinHeader.ns0#updateCoinHeader.documentID]" message="documentID is null"/>
		<set-variable value="#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.updateCoinHeader.ns0#updateCoinHeader.documentID]" doc:name="documentID" doc:id="d8f3d160-401a-4e8d-b2eb-73ff5576416b" variableName="documentID"/>
		<validation:validate-size doc:name="Validate size documentID" doc:id="d2f8d994-2e5e-4a7d-a160-769fd6724e93" value="#[vars.documentID]" min="24" max="24" message="#[&quot;invalid hexadecimal representation of an ObjectId: '&quot; ++ vars.documentID ++ &quot;'&quot;]" />
		<choice doc:name="Choice" doc:id="577c2250-ed52-4e9d-953d-ac68f30c83b2" >
			<when expression='#[((keysOf(payload.body.updateCoin)) map ($ as String)) contains  "date"]'>
				<xml-module:validate-schema doc:name="Validate schema" doc:id="6fb1e088-1822-429b-a8ed-108785d1ce23" schemas="schemas\updateCoinWithInformation.xsd" >
					<xml-module:content ><![CDATA[#[payload.body]]]></xml-module:content>
				</xml-module:validate-schema>
				<ee:transform doc:name="XML to JSON" doc:id="c3d763ca-cec3-4bd7-86fe-4e1e426e4470">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	date: payload.body.updateCoin.date,
	data: payload.body.updateCoin.data.*coin map (object, index) -> {
		name: object.name,
		symbol: object.symbol,
		supply: object.supply,
		description: object.description,
		developmentStatus: object.developmentStatus,
		proofType: object.proofType,
		orgStructure: object.orgStructure,
		'coin_market_price': object.'coin_market_price',
		'coin_cap_price': object.'coin_cap_price',
		'coin_market_volume24h': object.'coin_market_volume24h',
		'coin_cap_volume24h':object.'coin_cap_volume24h'
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<mongo:update-documents collectionName="myFirstCollection" doc:name="Update documents" doc:id="9cd77aeb-d7fe-486e-9701-c9ffb2514599" config-ref="MongoDB_Config">
			<mongo:query><![CDATA[#[output application/json
---
{
    "_id" : {"\$oid" : vars.documentID}
}]]]></mongo:query>
		</mongo:update-documents>
			</when>
			<otherwise >
				<xml-module:validate-schema doc:name="Validate schema" doc:id="ae33bd00-abc3-4e88-967b-7bb1a864173c" schemas="schemas\updateCoinWithNewPrice.xsd">
					<xml-module:content ><![CDATA[#[payload.body]]]></xml-module:content>
				</xml-module:validate-schema>
				<ee:transform doc:name="XML to JSON" doc:id="50bbdf5b-0030-4fc8-b18d-3fb80185e99f" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	oldDate: payload.body.updateCoin.oldDate,
	newDate: payload.body.updateCoin.newDate,
	dateDifference: payload.body.updateCoin.dateDifference,
	data: payload.body.updateCoin.data.*coin map (object, index) -> {
		name: object.name,
		symbol: object.symbol,
		supply: object.supply,
		description: object.description,
		developmentStatus: object.developmentStatus,
		proofType: object.proofType,
		orgStructure: object.orgStructure,
		'coin_market_oldPriceUsd': object.'coin_market_oldPriceUsd',
		'coin_cap_oldPriceUsd': object.'coin_cap_oldPriceUsd',
		'coin_market_newPriceUsd': object.'coin_market_newPriceUsd',
		'coin_cap_newPriceUsd': object.'coin_cap_newPriceUsd',
		'coin_market_priceDifference': object.'coin_market_priceDifference',
		'coin_cap_priceDifference': object.'coin_cap_priceDifference',
		'coin_market_volume24h': object.'coin_market_volume24h',
		'coin_cap_volume24h':object.'coin_cap_volume24h'
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<try doc:name="Try" doc:id="ddaeac9b-ee4b-40d7-939e-7a50f0223a66" >
					<mongo:execute-command doc:name="Execute command" doc:id="b5c4b775-6d2f-42af-b40b-8d1b63f49809" config-ref="MongoDB_Config">
					<mongo:command><![CDATA[#[output application/json
---
{
  "aggregate": "myFirstCollection",
  "pipeline": [
  		{
  		"\$match": {
 					"_id": {"\$oid": vars.documentID}
				}
		}, 
		{
		"\$set": payload
		},
		{
		"\$unset": "date" 
		},
		{
		"\$merge": {
        		into: 'myFirstCollection',
        		on: '_id',
        		whenMatched: 'replace'
    			}
    	}
	],
  cursor: {}
}]]]></mongo:command>
				</mongo:execute-command>
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="665a5343-1c53-4178-b21a-8f43916f4b5a" type="ANY" when='#[error.description contains("java.lang.IllegalArgumentException: invalid hexadecimal representation of an ObjectId:")]'>
							<set-payload value="#[output application/json&#10;---&#10;{&#10;	matched: 0&#10;}]" doc:name="Set Payload" doc:id="b714317c-07cc-48dd-b7fd-63ddc6fceadf" />
						</on-error-continue>
					</error-handler>
				</try>
			</otherwise>
		</choice>
		<ee:transform doc:name="success or not result + httpStatus" doc:id="3cf55c14-918a-4d5f-8f64-9af8b4c62c85" >
			<ee:message >
				<ee:set-payload ><![CDATA[output application/xml
ns ns0 http://training.mulesoft.com/
---
if (payload.matched == 0)
	ns0#updateCoinResponse:{
		response: "document with id='"++ vars.documentID ++"' doesn't exist"
		}
else
	ns0#updateCoinResponse:{
		response: "document was updated successfully"
		}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="188bf084-883f-4811-a527-6649120df82f" message="#[payload]"/>
	

</sub-flow>
	<sub-flow name="deleteCoinSubFlow" doc:id="16698392-7802-4b87-acdf-ff8ebf5cbbf5" >
		<validation:is-not-null doc:id="dfe7df14-6ac8-4a83-af92-89c800311cc2" value='#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.deleteCoinHeader.ns0#deleteCoinHeader.documentID]' message="documentID is null" doc:name="Is not null documentID"/>
		<set-variable value="#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.deleteCoinHeader.ns0#deleteCoinHeader.documentID]" doc:name="documentID" doc:id="d3f8e7d8-7c51-4799-a00d-eb95abe7103b" variableName="documentID" />
		<validation:validate-size doc:name="Validate size documentID" doc:id="0ec266b4-fab7-4015-abd2-22681f18f268" message="#[&quot;invalid hexadecimal representation of an ObjectId: '&quot; ++ vars.documentID ++ &quot;'&quot;]" value="#[vars.documentID]" min="24" max="24"/>
		<mongo:remove-documents collectionName="myFirstCollection" doc:name="Remove documents" doc:id="0ace5dbf-682e-4265-8fbd-81f200f9bb95" config-ref="MongoDB_Config">
			<mongo:query ><![CDATA[#[output application/json
---
{
    "_id" : {"\$oid" : vars.documentID}
}]]]></mongo:query>
		</mongo:remove-documents>
		<ee:transform doc:name="success or not result + httpStatus" doc:id="196c911e-d99a-417c-aa00-162541d7e09e" >
			<ee:message >
				<ee:set-payload ><![CDATA[output application/xml
ns ns0 http://training.mulesoft.com/
---
if (payload == 0)
	ns0#deleteCoinResponse:{
		response: "document with id='"++ vars.documentID ++"' doesn't exist"
		}
else
	ns0#deleteCoinResponse:{
		response: "document with id='"++ vars.documentID ++"' was deleted successfully"
		}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="ba7f1553-8c79-47e7-82cb-317e9c21e5d1" message="#[payload]"/>

</sub-flow>

	<sub-flow name="createCoinSubFlow" doc:id="4de0c4c0-0472-4963-8e12-29f4d12ba80e" >
		<xml-module:validate-schema doc:name="Validate schema" doc:id="a31358ef-e51d-4abe-8bb2-25893379d5db" schemas="schemas\createCoin.xsd">
			<xml-module:content ><![CDATA[#[payload.body]]]></xml-module:content>
		</xml-module:validate-schema>
		<set-variable value="#[payload.body]" doc:name="Set Document" doc:id="d6a47ab6-6de5-4cbc-84c8-2ec81f5863a7" variableName="document"/>
		<mongo:collection-exists doc:name="Collection exists" doc:id="85786ec6-de81-404d-84d0-9b477b1a005e" config-ref="MongoDB_Config" collectionName="myFirstCollection"/>
		<choice doc:name="Choice" doc:id="0945b3d1-4c22-44bd-8c64-40fc39ce54aa" >
			<when expression="#[!payload]">
				<mongo:create-collection doc:name="Create collection" doc:id="8b8e0135-70ed-4e67-ab74-4da40700eb65" config-ref="MongoDB_Config" collectionName="OneMoreCollection"/>
				<ee:transform doc:name="XML to JSON" doc:id="5e6c8e6c-5330-4364-915d-055922c15b25">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  date: vars.document.body.createCoin.date,
  data: vars.document.body.createCoin.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    'coin_market_price': object.'coin_market_price',
    'coin_cap_price': object.'coin_cap_price',
    'coin_market_volume24h': object.'coin_market_volume24h',
    'coin_cap_volume24h':object.'coin_cap_volume24h'
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<mongo:insert-document doc:name="Insert document" doc:id="3fca5735-50a0-45d5-a535-55e020fb2697" config-ref="MongoDB_Config" collectionName="myFirstCollection">
					<mongo:document ><![CDATA[#[vars.document]]]></mongo:document>
				</mongo:insert-document>
			
</when>
			<otherwise >
				<ee:transform doc:name="XML to JSON" doc:id="694c014b-8d26-4663-b8c3-281fcf75ddff">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  date: vars.document.createCoin.date,
  data: vars.document.createCoin.data.*coin map (object, index) -> {
    name: object.name,
    symbol: object.symbol,
    supply: object.supply,
    'coin_market_price': object.'coin_market_price',
    'coin_cap_price': object.'coin_cap_price',
    'coin_market_volume24h': object.'coin_market_volume24h',
    'coin_cap_volume24h':object.'coin_cap_volume24h'
  }
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<mongo:insert-document doc:name="Insert document" doc:id="c14bb610-d8a7-4554-b387-ae9a1fd05de1" config-ref="MongoDB_Config" collectionName="myFirstCollection">
				</mongo:insert-document>
			
</otherwise>
		</choice>

		<logger level="INFO" doc:name="Logger" doc:id="d075ac4b-2cd8-431f-a620-b99462cf503c" message="#[response: &quot;document with id='&quot;++ ((payload.&quot;_id&quot;.&quot;\$oid&quot;) default &quot;&quot;) ++&quot;' was created&quot;]" />
		<ee:transform doc:name="Set header + httpStatus" doc:id="1d15e97c-078d-4e7b-ae54-95fcc2b2eaf0" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0 
ns ns0 http://training.mulesoft.com/
output application/java
--- 
{  
    headers: {
        createCoinResponseHeader: {
            ns0#createCoinResponseHeader: {
            	documentID: payload."_id"."\$oid"
            }
        } write "application/xml"
    },
    
    body: {
    	"null":null
    } write "application/xml"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[201]]></ee:set-variable>
			</ee:variables>
		
</ee:transform>
	
</sub-flow>
	<sub-flow name="readCoinSubFlow" doc:id="a9b98d9b-2232-4919-b3bf-b8ad88d215eb" >
		<validation:is-not-null doc:name="Is not null documentID" doc:id="c66be791-fd40-46e4-9598-da70e7dc3bfb" value="#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.readCoinHeader.ns0#readCoinHeader.documentID]" message="documentID is null"/>
		<set-variable value="#[ns ns0 http://training.mulesoft.com/
&#10;---
&#10;payload.headers.readCoinHeader.ns0#readCoinHeader.documentID]" doc:name="documentID" doc:id="6c65361f-d3a6-4e99-9acd-745341467a64" variableName="documentID"/>
		<validation:validate-size doc:name="Validate size documentID" doc:id="124b8a46-50d3-4438-898c-0bca6963dbdf" value="#[vars.documentID]" min="24" max="24" message="#[&quot;invalid hexadecimal representation of an ObjectId: '&quot; ++ vars.documentID ++ &quot;'&quot;]" />
		<mongo:find-documents doc:name="Find documents" doc:id="efba297c-8267-4a9c-8153-002e1d11523f" config-ref="MongoDB_Config" collectionName="myFirstCollection" fields="data,date,newDate,oldDate,dateDifference">
			<mongo:query ><![CDATA[#[output application/json
---
{
    "_id" : {"\$oid" : vars.documentID}
}]]]></mongo:query>
		</mongo:find-documents>
		<choice doc:name="Choice" doc:id="99a93bb5-dbf9-408b-8826-c179369a8dea" >
			<when expression="#[sizeOf(payload) == 0]">
				<ee:transform doc:name="doesn't exist + httpStatus" doc:id="42a75e3e-b722-404c-a598-3a0f0d562c98" >
					<ee:message >
						<ee:set-payload ><![CDATA[output application/xml
ns ns0 http://training.mulesoft.com/
---
ns0#readCoinResponse:{
	response:"document with id='"++ (vars.documentID default "null") ++"' doesn't exist"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="f1a8211c-01f6-464d-b8ac-8aeea731d579" message="#[payload]"/>
			
</when>
			<otherwise >
				<ee:transform doc:name="JSON to XML + httpStatus" doc:id="421fe978-f0af-4f54-9c1a-f410aefa3b8a">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
ns ns0 http://training.mulesoft.com/
output application/xml
---
{
  ns0#readCoinResponse: {
    (oldDate: payload.oldDate)if(payload.oldDate != null),
  	(newDate: payload.newDate)if(payload.newDate != null),
  	(dateDifference: payload.dateDifference)if(payload.dateDifference != null),
    (date: payload.date)if(payload.date != null),
    data: payload.data map (object, index)-> {
    	coin: object
  }
 }
}]]></ee:set-payload>
			</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[200]]></ee:set-variable>
					</ee:variables>
		
</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="ca8d07f0-574f-4691-96a7-fe8de5dcce63" message="#[response: &quot;document with id='&quot;++ vars.documentID ++&quot;' was read&quot;]"/>
			
</otherwise>
		</choice>
	</sub-flow>
</mule>
